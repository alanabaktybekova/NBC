import json
import logging
import requests
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.inline_keyboard import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

import random

markup = ReplyKeyboardMarkup()
markup.add(KeyboardButton('/start'), KeyboardButton('/—Å—á–µ—Ç'))


API_TOKEN = '5864575392:AAFHRZQR3gBvPKNO27uZznUhWLr_7xRNOLU'
# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

choises = ['–ö–∞–º–µ–Ω—å', '–ù–æ–∂–Ω–∏—Ü—ã', '–ë—É–º–∞–≥–∞']

messagemarkup = InlineKeyboardMarkup()
messagemarkup.add(InlineKeyboardButton('üóø–ö–∞–º–µ–Ω—å', callback_data='–ö–∞–º–µ–Ω—å'), InlineKeyboardButton('‚úÇÔ∏è–ù–æ–∂–Ω–∏—Ü—ã', callback_data='–ù–æ–∂–Ω–∏—Ü—ã'), InlineKeyboardButton('üìÑ–ë—É–º–∞–≥–∞', callback_data='–ë—É–º–∞–≥–∞'))

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.answer('–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞', reply_markup=markup)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö', reply_markup=messagemarkup)


@dp.message_handler(commands=['—Å—á–µ—Ç'])
async def results(message: types.Message):
    with open('database.json', 'r') as f:
        data = json.load(f)
    user = None
    for i in range(len(data['results'])):
        print(data['results'][i]['user'])
        print(message.from_user.id)
        if data['results'][i]['user'] == message.from_user.id:
            user = data['results'][i]
            break
    if user:
        await message.reply(f'–ü–æ–±–µ–¥ - {user["win"]}\n–ü—Ä–æ–∏–≥—Ä–∞–ª - {user["lose"]}\n–ù–∏—á—å—è - {user["draw"]}')
    else:
        await message.reply('–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–∞')


@dp.message_handler()
async def echo(message: types.Message):
    await message.answer('–ü—Ä–æ—Å—Ç–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —É–º–µ—é')


@dp.callback_query_handler()
async def calldatadeffunc(call: types.callback_query):
    with open('database.json', 'r') as f:
        data = json.load(f)
    if call.from_user.id in data['users']:
        pass
    else:
        data['users'].append(call.from_user.id)
        data['results'].append({'user': call.from_user.id, 'win': 0, 'lose': 0, 'draw': 0})

    choise = random.choice(choises)
    if choise == call.data:
        for i in range(len(data['results'])):
            if data['results'][i]['user'] == call.from_user.id:
                data['results'][i]['draw'] += 1
                break
        await bot.send_message(chat_id=call.from_user.id, text='–Ω–∏—á—å—è')
    elif choise == '–ë—É–º–∞–≥–∞' and call.data == '–ö–∞–º–µ–Ω—å' or choise == '–ö–∞–º–µ–Ω—å' and call.data == '–ù–æ–∂–Ω–∏—Ü—ã' or choise == '–ù–æ–∂–Ω–∏—Ü—ã' and call.data == '–ë—É–º–∞–≥–∞':
        for i in range(len(data['results'])):
            if data['results'][i]['user'] == call.from_user.id:
                data['results'][i]['lose'] += 1
                break
        await bot.send_message(chat_id=call.from_user.id, text=f'–Ø –≤—ã–±—Ä–∞–ª {choise}\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üò¢üò¢')
    elif call.data == '–ë—É–º–∞–≥–∞' and choise == '–ö–∞–º–µ–Ω—å' or call.data == '–ö–∞–º–µ–Ω—å' and choise == '–ù–æ–∂–Ω–∏—Ü—ã' or call.data == '–ù–æ–∂–Ω–∏—Ü—ã' and choise == '–ë—É–º–∞–≥–∞':
        for i in range(len(data['results'])):
            if data['results'][i]['user'] == call.from_user.id:
                data['results'][i]['win'] += 1
                break
        await bot.send_message(chat_id=call.from_user.id, text=f'–Ø –≤—ã–±—Ä–∞–ª {choise}\n–í—ã –≤—ã–π–≥—Ä–∞–ª–∏ ü•≥ü•≥')
    with open('database.json', 'w')as f:
        json.dump(data, f)
    await bot.send_message(chat_id=call.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö', reply_markup=messagemarkup)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
